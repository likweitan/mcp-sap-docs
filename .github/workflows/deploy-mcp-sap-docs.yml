name: Deploy MCP stack

on:
  push:
    branches: [ main ]

  # Allow manual triggering
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    # ðŸ‘‡ must match the environment where you stored the secrets
    environment:
      name: remove server

    steps:
      - name: Check out repo (for action context only)
        uses: actions/checkout@v4

      - name: Preflight verify required secrets are present
        run: |
          set -euo pipefail
          for s in SERVER_IP SERVER_USERNAME SSH_PRIVATE_KEY; do
            [ -n "${!s}" ] || { echo "Missing $s"; exit 1; }
          done
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Auto-increment version
        run: |
          # Get current version and increment patch
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Extract major.minor.patch
          IFS='.' read -ra PARTS <<< "$CURRENT_VERSION"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
      - name: Update hardcoded version in streamable server
        run: |
          # Update the hardcoded version in streamable-http-server.ts
          sed -i 's/const VERSION = "[0-9]*\.[0-9]*\.[0-9]*";/const VERSION = "'${{ env.NEW_VERSION }}'";/g' src/streamable-http-server.ts
          
      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json src/streamable-http-server.ts
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip ci]" || exit 0
          git push

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          NEW_VERSION: ${{ env.NEW_VERSION }}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: NEW_VERSION
          script: |
            set -Eeuo pipefail

            echo "==> Ensure base path exists and owned by user"
            sudo mkdir -p /opt/mcp-sap
            sudo chown -R "$USER":"$USER" /opt/mcp-sap

            echo "==> Clone or update repo (with submodules)"
            if [ -d /opt/mcp-sap/mcp-sap-docs/.git ]; then
              cd /opt/mcp-sap/mcp-sap-docs
              git config --global url."https://github.com/".insteadOf git@github.com:
              git fetch --prune
              git reset --hard origin/main
            else
              cd /opt/mcp-sap
              git config --global url."https://github.com/".insteadOf git@github.com:
               git clone https://github.com/marianfoo/mcp-sap-docs.git
              cd mcp-sap-docs
            fi
            
            echo "==> Deploying version: $NEW_VERSION"

            echo "==> Configure BM25 search environment"
            # Ensure metadata file exists for centralized configuration
            [ -f /opt/mcp-sap/mcp-sap-docs/data/metadata.json ] || echo "Metadata file will be created during build"
            
            echo "==> Run setup (shallow, single-branch submodules + build)"
            SKIP_NESTED_SUBMODULES=1 bash setup.sh

            echo "==> (Re)start PM2 processes with BM25 search support"
            # Proxy (SSE) on 127.0.0.1:18080; HTTP status on 127.0.0.1:3001; Streamable HTTP on 127.0.0.1:3122
            pm2 start /opt/mcp-sap/mcp-sap-docs/ecosystem.config.cjs --only mcp-sap-proxy      || pm2 restart mcp-sap-proxy
            pm2 start /opt/mcp-sap/mcp-sap-docs/ecosystem.config.cjs --only mcp-sap-http       || pm2 restart mcp-sap-http
            pm2 start /opt/mcp-sap/mcp-sap-docs/ecosystem.config.cjs --only mcp-sap-streamable || pm2 restart mcp-sap-streamable
            pm2 save

            echo "==> Health checks"
            for i in $(seq 1 30); do curl -fsS http://127.0.0.1:18080/status >/dev/null && break || sleep 2; done
            curl -fsS http://127.0.0.1:18080/status
            for i in $(seq 1 30); do curl -fsS http://127.0.0.1:3001/status  >/dev/null && break || sleep 2; done
            curl -fsS http://127.0.0.1:3001/status
            # Streamable HTTP server health on 127.0.0.1:3122
            for i in $(seq 1 30); do curl -fsS http://127.0.0.1:3122/health  >/dev/null && break || sleep 2; done
            curl -fsS http://127.0.0.1:3122/health